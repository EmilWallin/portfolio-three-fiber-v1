/*
Auto-generated by: https://github.com/pmndrs/gltfjsx
*/

import * as THREE from "three";
import React, { useRef } from "react";
import { useGLTF } from "@react-three/drei";
import { GLTF } from "three-stdlib";
import { useFrame } from "@react-three/fiber";
import { a } from "@react-spring/three";
import { Mesh } from "three";

type GLTFResult = GLTF & {
    nodes: {
        Curve: THREE.Mesh;
    };
    materials: {
        ["SVGMat.001"]: THREE.MeshStandardMaterial;
    };
};

export default function Model({ ...props }: JSX.IntrinsicElements["group"]) {
    const mesh = useRef<Mesh>(null);
    const { nodes, materials } = useGLTF(
        "/modelAssets/LinkedIn.gltf"
    ) as GLTFResult;

    useFrame(() => {
        if (mesh.current !== null) {
            mesh.current.rotation.z += 0.005;
        }
    });

    return (
        <group {...props} dispose={null}>
            <a.mesh
                ref={mesh}
                castShadow
                receiveShadow
                geometry={nodes.Curve.geometry}
                material={materials["SVGMat.001"]}
                position={[0.07, -0.01, -0.07]}
                scale={32}
                rotation={[89.8, 0, 0]}
            >
                <meshNormalMaterial attach="material" />
            </a.mesh>
        </group>
    );
}

useGLTF.preload("/LinkedIn.gltf");
