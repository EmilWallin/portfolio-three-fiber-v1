/*
Auto-generated by: https://github.com/pmndrs/gltfjsx
*/

import * as THREE from "three";
import React, { useRef } from "react";
import { useGLTF } from "@react-three/drei";
import { GLTF } from "three-stdlib";
import { useFrame } from "@react-three/fiber";
import { a } from "@react-spring/three";

type GLTFResult = GLTF & {
    nodes: {
        Curve: THREE.Mesh;
    };
    materials: {
        SVGMat: THREE.MeshStandardMaterial;
    };
};

export default function Model({ ...props }: any) {
    const group = useRef<THREE.Group>();
    const { nodes, materials } = useGLTF("/Github.gltf") as GLTFResult;

    // useFrame(() => (group.rotation.x = group.rotation.y += 0.01));

    return (
        <a.group ref={group} {...props} dispose={null} rotation={[90, 0, 0]}>
            <mesh
                castShadow
                receiveShadow
                geometry={nodes.Curve.geometry}
                material={materials.SVGMat}
                position={[0.05, -0.05, -0.08]}
                scale={4.5}
            >
                <meshNormalMaterial attach="material" />
            </mesh>
        </a.group>
    );
}

useGLTF.preload("/Github.gltf");
